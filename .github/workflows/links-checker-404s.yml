name: 'General - Link Check for Documentation Sites'

on:
  # Runs every day at midnight UTC (00:00).
  schedule:
    - cron: '0 12 * * 1-5'
  # Allows you to run this workflow manually from the Actions tab.
  workflow_dispatch:
    inputs:
      selected_project:
        description: 'Select a specific project (optional)'
        required: false
        type: choice
        options:
          - All
          - Tanssi
          - Moonbeam
          - Wormhole
          - kluster.ai
          - Polkadot
      create_issue:
        description: 'Create GitHub Issue if broken links are found?'
        required: false
        type: boolean
        default: true

jobs:
  generate-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Set filtered matrix
        id: set-matrix
        shell: bash
        run: |
          selected="${{ github.event.inputs.selected_project || 'All' }}"

          # The 'token' key has been removed from this JSON object
          all_projects=$(jq -n '
            [
              { "mkdocs_repo": "papermoonio/kluster-mkdocs", "docs_repo": "kluster-ai/docs", "mkdocs_repo_name": "kluster-mkdocs", "docs_repo_name": "kluster-docs", "root_dir": "", "label": "kluster.ai" },
              { "mkdocs_repo": "papermoonio/polkadot-mkdocs", "docs_repo": "polkadot-developers/polkadot-docs", "mkdocs_repo_name": "polkadot-mkdocs", "docs_repo_name": "polkadot-docs", "root_dir": "", "label": "Polkadot" },
              { "mkdocs_repo": "papermoonio/moonbeam-mkdocs", "docs_repo": "moonbeam-foundation/moonbeam-docs", "mkdocs_repo_name": "moonbeam-mkdocs", "docs_repo_name": "moonbeam-docs", "root_dir": "", "label": "Moonbeam" },
              { "mkdocs_repo": "papermoonio/tanssi-mkdocs", "docs_repo": "moondance-labs/tanssi-docs", "mkdocs_repo_name": "tanssi-mkdocs", "docs_repo_name": "tanssi-docs", "root_dir": "", "label": "Tanssi" },
              { "mkdocs_repo": "papermoonio/wormhole-mkdocs", "docs_repo": "wormhole-foundation/wormhole-docs", "mkdocs_repo_name": "wormhole-mkdocs", "docs_repo_name": "wormhole-docs", "root_dir": "/docs", "label": "Wormhole" }
            ]
          ')

          if [ "$selected" == "All" ]; then
            filtered="$all_projects"
          else
            filtered=$(echo "$all_projects" | jq -c --arg sel "$selected" '[.[] | select(.label == $sel)]')
          fi

          if [ -z "$filtered" ] || [ "$filtered" = "[]" ]; then
            echo "❌ Error: No projects matched filter '$selected'."
            exit 1
          fi

          echo "matrix=$(echo "$filtered" | jq -c '.')" >> "$GITHUB_OUTPUT"

  check-links:
    needs: generate-matrix
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        # This fromJson will now work because the input is not redacted
        include: ${{ fromJson(needs.generate-matrix.outputs.matrix) }}
    steps:
      # Select the correct token based on the matrix label
      - name: Select Token
        id: select_token
        run: |
          if [ "${{ matrix.label }}" == "Tanssi" ]; then
            echo "token=${{ secrets.GH_404_CHECKER_TANSSI }}" >> $GITHUB_OUTPUT
          else
            echo "token=${{ secrets.GH_404_CHECKER }}" >> $GITHUB_OUTPUT
          fi
      
      # Check out the MkDocs project repository into a specific directory.
      - name: 'Checkout MkDocs Repo for ${{ matrix.mkdocs_repo_name }}'
        uses: actions/checkout@v4
        with:
          repository: ${{ matrix.mkdocs_repo }}
          path: ${{ matrix.mkdocs_repo_name }}

      # Check out the corresponding documentation content repo into a subdirectory.
      - name: 'Checkout Docs Content Repo for ${{ matrix.docs_repo_name }}'
        uses: actions/checkout@v4
        with:
          repository: ${{ matrix.docs_repo }}
          path: '${{ matrix.mkdocs_repo_name}}/${{ matrix.docs_repo_name}}'

      # Set up Python environment.
      - name: 'Set up Python'
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      # Install Python dependencies from requirements.txt.
      - name: 'Install dependencies'
        working-directory: ${{ matrix.mkdocs_repo_name }}
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt

      # Install MkDocs and the link checker plugin.
      - name: 'Build MkDocs site'
        working-directory: ${{ matrix.mkdocs_repo_name }}
        run: mkdocs build -d site${{ matrix.root_dir }}

      # Prepare arguments for the link checker.
      - name: Prepare Lychee Arguments
        id: lychee_args
        run: |
          ARGS="--root-dir $(pwd)/${{ matrix.mkdocs_repo_name }}/site --verbose --no-progress --accept 429,403"
          if [[ -f "$(pwd)/${{ matrix.mkdocs_repo_name }}/.urlignore" ]]; then
            echo "Found .urlignore file. Adding to lychee arguments."
            ARGS="$ARGS --exclude-file $(pwd)/${{ matrix.mkdocs_repo_name }}/.urlignore"
          fi
          echo "args=$ARGS" >> $GITHUB_OUTPUT

      # Attempt 1
      - name: Run Link Checker (Attempt 1)
        id: lychee1
        uses: lycheeverse/lychee-action@v2.4.1
        with:
          args: >
            ${{ steps.lychee_args.outputs.args }}
            './${{ matrix.mkdocs_repo_name }}/site/**/*.html'
          output: ./${{ matrix.mkdocs_repo_name }}/lychee-report.md
          fail: true
        continue-on-error: true
      
      # Backoff
      - name: Backoff
        if: steps.lychee1.outcome == 'failure'
        run: sleep 60
      
      # Attempt 2 (only if 1 failed)
      - name: Run Link Checker (Attempt 2)
        id: lychee2
        if: steps.lychee1.outcome == 'failure'
        uses: lycheeverse/lychee-action@v2.4.1
        with:
          args: >
            ${{ steps.lychee_args.outputs.args }}
            './${{ matrix.mkdocs_repo_name }}/site/**/*.html'
          output: ./${{ matrix.mkdocs_repo_name }}/lychee-report.md
          fail: true
        continue-on-error: true

      - name: Set Final Outcome
        id: lychee
        run: |
          if [[ "${{ steps.lychee2.outcome }}" == "failure" ]]; then
            echo "outcome=failure" >> $GITHUB_OUTPUT
          else
            echo "outcome=success" >> $GITHUB_OUTPUT
          fi

      # If the link checker fails, read the report and create a GitHub issue.
      - name: 'Read Link Checker Report'
        if: steps.lychee.outputs.outcome == 'failure'
        id: report
        run: |
          report_body=$(cat ./${{ matrix.mkdocs_repo_name }}/lychee-report.md)
          report_cleaned=$(echo "$report_body" | sed 's/^\s*//;s/\s*$//')
          
          {
            echo "body<<EOF"
            echo "### 🚨 Broken Links Detected in ${{ matrix.label }} Docs"
            echo ""
            echo "The scheduled link checker has found one or more broken links."
            echo "This issue was automatically generated by the [central docs workflow](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})."
            echo ""
            echo "---"
            echo ""
            echo "#### 📝 Link Checker Report:"
            echo ""
            echo "$report_cleaned"
            echo ""
            echo "---"
            echo "#### Next Steps"
            echo "1.  **Investigate**: Check if the links are temporarily down or permanently gone."
            echo "2.  **Fix**: Update the source markdown files in this repository."
            echo "3.  **Close**: Once fixed, this issue can be closed."
            echo "EOF"

            echo "report_content<<EOF"
            echo "$report_cleaned"
            echo "EOF"
          } >> $GITHUB_OUTPUT

      # Create a GitHub issue only if broken links are detected.
      - name: Create Issue on Failure
        if: steps.lychee.outputs.outcome == 'failure' && ((github.event_name == 'workflow_dispatch' && github.event.inputs.create_issue == 'true') || github.event_name == 'schedule')
        id: create_issue
        env:
          GH_TOKEN: ${{ steps.select_token.outputs.token }}
        run: |
          gh issue create \
            --repo "${{ matrix.docs_repo }}" \
            --title "Broken Links Detected on $(date +'%Y-%m-%d')" \
            --body "${{ steps.report.outputs.body }}"
